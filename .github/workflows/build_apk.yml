name: Build Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
    # Krok 1: Pobierz kod repozytorium
    - name: Checkout code
      uses: actions/checkout@v4

    # Krok 2: Ustaw Python 3.10
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # Krok 3: Zainstaluj zależności systemowe
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libffi-dev \
          libssl-dev \
          autoconf \
          autotools-dev \
          automake \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo6 \
          cmake \
          libltdl-dev \
          libsqlite3-dev \
          git \
          zip \
          unzip \
          openjdk-17-jdk \
          python3-pip \
          patchelf

    # Krok 4: Zainstaluj zależności Python
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cython==3.0.2
        pip install buildozer==1.5.0

    # Krok 5: Zainstaluj Android SDK i NDK
    - name: Install Android SDK
      uses: android-actions/setup-android@v2

    - name: Install Android NDK
      id: setup-ndk
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25b
        add-to-path: true

    # Krok 6: Akceptuj licencje Android SDK
    - name: Accept Android SDK licenses
      run: |
        yes | sdkmanager --licenses || true

    # Krok 7: Wyświetl informacje o środowisku
    - name: Display environment info
      run: |
        echo "Python version: $(python --version)"
        echo "Pip version: $(pip --version)"
        echo "Buildozer version: $(buildozer --version)"
        echo "NDK path: ${{ steps.setup-ndk.outputs.ndk-path }}"
        echo "NDK version: ${{ steps.setup-ndk.outputs.ndk-version }}"
        echo "JAVA_HOME: $JAVA_HOME"

    # Krok 8: Przygotuj środowisko Buildozer (POPRAWIONA WERSJA)
    - name: Prepare Buildozer environment
      run: |
        # Tworzenie niezbędnych katalogów
        mkdir -p .buildozer/android/platform
        
        # Sprawdź czy python-for-android już istnieje
        if [ ! -d ".buildozer/android/platform/python-for-android" ]; then
          echo "Cloning python-for-android..."
          git clone https://github.com/kivy/python-for-android .buildozer/android/platform/python-for-android --branch develop --depth 1
        else
          echo "python-for-android directory already exists"
        fi
        
        # Konfiguracja Buildozer
        mkdir -p ~/.buildozer
        echo "[buildozer]" > ~/.buildozer/buildozer.spec
        echo "log_level = 2" >> ~/.buildozer/buildozer.spec

    # Krok 9: Wyczyść poprzednie kompilacje
    - name: Clean previous builds
      run: |
        buildozer android clean

    # Krok 10: Kompiluj APK z pełnym logowaniem
    - name: Build APK
      run: |
        buildozer android debug 2>&1 | tee buildozer.log
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
        ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }}
        BUILDOZER_WARN_ON_ROOT: 1

    # Krok 11: Zapisz artefakty
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-debug
        path: bin/*.apk

    # Krok 12: Zapisz logi Buildozer
    - name: Upload Buildozer logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: buildozer-logs
        path: .buildozer/logs/

    # Krok 13: Zapisz pełny log kompilacji
    - name: Upload build log
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-log
        path: buildozer.log
